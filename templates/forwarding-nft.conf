{% from "roles/nft/templates/nft-common.j2" import nft_addr_match %}
{% macro solicit_mc(ip6, caller=None) %}
{{ "ff02::1:ff00:0/104" | ipsubnet() | ipaddr((ip6 | ipaddr('address') | ipaddr('int') | int).__and__(16777215) | string) -}}
{% endmacro %}
{% macro macsuffix(mac, caller=None) %}
{% set macparts = (mac | hwaddr).split(":") %}
{% set p1 = ["%02x" | format((macparts[0] | int(base=16)).__xor__(2)), macparts[1]] | join("") %}
{% set p2 = [macparts[2], "ff"] | join("") %}
{% set p3 = ["fe", macparts[3]] | join("") %}
{% set p4 = macparts[4:] | join("") %}
{{ ("::" + ([p1, p2, p3, p4] | join(":"))) | ipaddr() -}}
{% endmacro %}
{% macro ip6_ll(mac, caller=None) %}
{{ "fe80::/64" | ipsubnet() | ipaddr(macsuffix(mac) | ipaddr("int")) -}}
{% endmacro %}

# EXPLICITLY DEFINED PORT FORWARDINGS
table ip nat {
    chain PREROUTING {
{% for item in nat_port_forwarding %}
        ip daddr {{ item.host_addr }} {{ item.proto }} dport {{ item.host_port }} dnat {{ item.guest_addr }}:{{ item.guest_port }};
{% endfor %}
    }
}

table inet filter {
    chain FORWARD {
{% for item in nat_port_forwarding %}
        ip daddr {{ item.guest_addr }} {{ item.proto }} dport {{ item.guest_port }} accept;
{% endfor %}
    }
}

# EXPLICITLY DEFINED EXTRA FORWARDING RULES
{% if extra_forwarding %}
table inet filter {
    chain FORWARD {
{% for item in extra_forwarding %}
        meta iifname {{ item.interface }} meta oifname {{ item.outerface }} {% if item.daddr | default(False) %}{% call nft_addr_match(item.daddr, 'd') %}{% endcall %} {% endif %}{% if item.saddr | default(False) %}{% call nft_addr_match(item.saddr, 's') %}{% endcall %} {% endif %} accept;
{% endfor %}
    }
}
{% endif %}


# GUEST NETWORK FORWARDING RULES + NAT
{% for item in networks %}
{% set mode = item.mode | default("nat") %}
## NETWORK {{ item.name }} (mode = {{ mode }})
{% set ipv4_net = item.ip4 | default([]) | ipv4('network/prefix') %}
{% set ipv6_net = item.ip6 | default([]) | ipv6('network/prefix') %}
{% if mode == "nat" %}
table ip nat {
    chain POSTROUTING {
        ip saddr {{ ipv4_net }} ip daddr 224.0.0.0/24 return;
        ip saddr {{ ipv4_net }} ip daddr 255.255.255.255/32 return;
        ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} ip protocol tcp masquerade to :1025-65535 random;
        ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} ip protocol udp masquerade to :1025-65535 random;
        ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} masquerade;
    }
}
{% endif %}

table inet filter {
    chain FORWARD {
{% if mode == "nat" %}
        ip daddr {{ ipv4_net }} meta oifname {{ item.iface }} ct state { related, established } accept;
        ip saddr {{ ipv4_net }} meta iifname {{ item.iface }} accept;
{% endif %}
{% if item.ip6 | default(False) %}
        ip6 saddr {{ ipv6_net }} meta iifname {{ item.iface }} accept;
        ip6 daddr {{ ipv6_net }} meta oifname {{ item.iface }} accept;
{% endif %}
        meta iifname {{ item.iface }} oifname {{ item.iface }} accept;
        meta oifname {{ item.iface }} reject with icmpx type port-unreachable;
        meta iifname {{ item.iface }} reject with icmpx type port-unreachable;
    }

    chain INPUT {
        meta iifname {{ item.iface }} udp dport { 53, 67 } accept;
        meta iifname {{ item.iface }} tcp dport { 53, 67 } accept;
    }
}
{% endfor %}


# MAC/ARP/IP SPOOFING FILTERS
{% for container in containers %}
## container {{ container.name }}
{% for network in container.networks %}
### network interface to {{ network.net }} of {{ container.name }}
### hostif={{ network.host_ifname }}
### guestif={{ network.guest_ifname | default('') }}
{% set netobj = (networks | selectattr('name', 'equalto', network.net) | list)[0] %}
{% if netobj.strict | default(True) %}
{% set fwd_chain_name = "ENF-" + network.host_ifname %}
table bridge filter {
    chain CHK-{{ network.host_ifname }}-MAC {
        ether saddr {{ network.mac }} return;
        drop;
    }

    chain PREROUTING {
        meta iifname {{ network.host_ifname }} jump {{ fwd_chain_name }};
    }

{% if network.ip6 | default(False) %}
    chain {{ fwd_chain_name }}v6 {
        icmpv6 type nd-neighbor-advert @th,64,128 {{ network.ip6 | ipv6('address') | ipv6('int') }} accept;
        icmpv6 type nd-neighbor-advert @th,64,128 {{ ip6_ll(network.mac) | ipv6('address') | ipv6('int') }} accept;
        icmpv6 type nd-neighbor-advert drop;
        icmpv6 type nd-redirect drop;
        icmpv6 type nd-router-advert drop;
        icmpv6 type router-renumbering drop;
        accept;
    }
{% endif %}

    chain {{ fwd_chain_name }} {
        jump CHK-{{ network.host_ifname }}-MAC;
        # no rogue DHCP servers
        udp dport 68 udp sport 67 drop;
{% if network.ip4 | default(False) %}
        ip saddr 0.0.0.0/32 udp sport 68 udp dport 67 accept;
{% set ip4addrs = [network.ip4] if network.ip4 is string else network.ip4 %}
        ip saddr { {{ ip4addrs | ipv4('address') | join(", ") }} } accept;
        arp operation reply arp plen 4 @nh,112,32 { {{ ip4addrs | ipv4('address') | ipv4('int') | join(", ") }} } @nh,64,48 { {{ network.mac | hwaddr('int') }} } accept;
        arp operation request accept;
{% endif %}

{% if network.ip6 | default(False) %}
        # first filter all IPv6 traffic for valid sender addresses
        ip6 saddr {{ network.ip6 | ipv6('address') }} jump {{ fwd_chain_name }}v6;
        ip6 saddr {{ ip6_ll(network.mac) | ipv6('address') }} jump {{ fwd_chain_name }}v6;
        ip6 saddr ::/128 ip6 daddr { {{ solicit_mc(ip6_ll(network.mac)) }}, {{ solicit_mc(network.ip6) }}, fe02::1/128, fe02::2/128 } jump {{ fwd_chain_name }}v6;
{% endif %}
        drop;
    }
}
{% endif %}
{% endfor %}
{% endfor %}
