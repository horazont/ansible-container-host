{% from "roles/nft/templates/nft-common.j2" import nft_addr_match %}

# EXPLICITLY DEFINED PORT FORWARDINGS
table ip nat {
    chain PREROUTING {
{% for item in nat_port_forwarding %}
{% if not (item.stateless | default(False)) %}
        ip daddr {{ item.host_addr }} {{ item.proto }} dport {{ item.host_port }} dnat {{ item.guest_addr }}:{{ item.guest_port }};
{% endif %}
{% endfor %}
    }
}

table inet filter {
    chain FORWARD {
{% for item in nat_port_forwarding %}
        ip daddr {{ item.guest_addr }} {{ item.proto }} dport {{ item.guest_port }} accept;
{% if item.stateless | default(False) %}
        iifname {{ item.guest_iface }} ip saddr {{ item.guest_addr }} ip protocol {{ item.proto }} {{ item.proto }} sport {{ item.guest_port }} ip saddr set {{ item.host_addr }} {{ item.proto }} sport set {{ item.host_port }} accept;
{% endif %}
{% endfor %}
    }
}

table inet raw {
    chain PREROUTING {
{% for item in nat_port_forwarding %}
{% if item.stateless | default(False) %}
        iifname {{ item.host_iface }} ip daddr {{ item.host_addr }} ip protocol {{ item.proto }} {{ item.proto }} dport {{ item.host_port }} ip daddr set {{ item.guest_addr }} {{ item.proto }} dport set {{ item.guest_port }} notrack;
        iifname {{ item.guest_iface }} ip saddr {{ item.guest_addr }} ip protocol {{ item.proto }} {{ item.proto }} sport {{ item.guest_port }} notrack;
{% endif %}
{% endfor %}
    }
}

# EXPLICITLY DEFINED EXTRA FORWARDING RULES
{% if extra_forwarding %}
table inet filter {
    chain FORWARD {
{% for item in extra_forwarding %}
        meta iifname {{ item.interface }} meta oifname {{ item.outerface }} {% if item.daddr | default(False) %}{% call nft_addr_match(item.daddr, 'd') %}{% endcall %} {% endif %}{% if item.saddr | default(False) %}{% call nft_addr_match(item.saddr, 's') %}{% endcall %} {% endif %} accept;
{% endfor %}
    }
}
{% endif %}


# EXPLICITLY DEFINED ACCESSIBLE NETWORKS

table inet filter {
    chain FORWARD {
{% for access_def in extra_network_access %}
{% set netobj = (networks | selectattr('name', 'equalto', access_def.container_net) | list)[0] %}
{% set ipv4_nets = access_def.networks | ipaddr('ipv4') %}
{% set container_ipv4 = netobj.ip4 | ipv4('network/prefix') %}
        # {{ access_def.name | default("<unnamed rule>") }}
        # container_net = {{ access_def.container_net }}
        # container_net ipv4 = {{ netobj.ip4 | default(None) }}
        # container_net ipv6 = {{ netobj.ip6 | default(None) }}
        # interface = {{ access_def.interface }}
        # networks = {{ access_def.networks }}
        meta iifname {{ access_def.interface }} meta oifname {{ netobj.iface }} ct state { related, established } accept;
        meta oifname {{ access_def.interface }} meta iifname {{ netobj.iface }} ct state { related, established } accept;
{% for rule in access_def.egress_rules | default([]) %}
        ip daddr { {{ ipv4_nets | join(", ") }} } ip saddr {{ container_ipv4 }} meta oifname {{ access_def.interface }} meta iifname {{ netobj.iface }} {{ rule }};
{% endfor %}
{% for rule in access_def.ingress_rules | default([]) %}
        ip saddr { {{ ipv4_nets | join(", ") }} } ip daddr {{ container_ipv4 }} meta iifname {{ access_def.interface }} meta oifname {{ netobj.iface }} {{ rule }};
{% endfor %}
{% if netobj.ip6 | default(False) %}{% endif %}
{% endfor %}
    }
}


# GUEST NETWORK FORWARDING RULES + NAT
{% for item in networks %}
{% set mode = item.mode | default("nat") %}
## NETWORK {{ item.name }} (mode = {{ mode }})
{% set ipv4_net = item.ip4 | default([]) | ipv4('network/prefix') %}
{% set ipv6_net = item.ip6 | default([]) | ipv6('network/prefix') %}
{% if mode == "nat" %}
table ip nat {
    chain POSTROUTING {
        ip saddr {{ ipv4_net }} ip daddr 224.0.0.0/24 return;
        ip saddr {{ ipv4_net }} ip daddr 255.255.255.255/32 return;
        meta oifname {{ upstream_interface }} ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} ip protocol tcp masquerade to :1025-65535 random;
        meta oifname {{ upstream_interface }} ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} ip protocol udp masquerade to :1025-65535 random;
        meta oifname {{ upstream_interface }} ip saddr {{ ipv4_net }} ip daddr != {{ ipv4_net }} masquerade;
    }
}
{% endif %}

table inet filter {
    chain FORWARD {
{% if mode == "nat" %}
        ip daddr {{ ipv4_net }} meta iifname {{ upstream_interface }} meta oifname {{ item.iface }} ct state { related, established } accept;
        ip saddr {{ ipv4_net }} meta oifname {{ upstream_interface }} meta iifname {{ item.iface }} accept;
{% endif %}
{% if item.ip6 | default(False) %}
        ip6 saddr {{ ipv6_net }} meta oifname {{ upstream_interface }} meta iifname {{ item.iface }} accept;
        ip6 daddr {{ ipv6_net }} meta iifname {{ upstream_interface }} meta oifname {{ item.iface }} accept;
{% endif %}
        meta iifname {{ item.iface }} oifname {{ item.iface }} accept;
        meta oifname {{ item.iface }} reject with icmpx type port-unreachable;
        meta iifname {{ item.iface }} reject with icmpx type port-unreachable;
    }

    chain INPUT {
        meta iifname {{ item.iface }} udp dport { 53, 67 } accept;
        meta iifname {{ item.iface }} tcp dport { 53, 67 } accept;
    }
}
{% endfor %}
