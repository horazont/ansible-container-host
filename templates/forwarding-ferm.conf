{% for item in networks %}
@hook post "iptables -t mangle -I POSTROUTING -o {{ item.iface }} -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill";
{% endfor %}

domain (ip ip6) {
{% for item in nat_port_forwarding %}
    table nat chain PREROUTING daddr {{ item.host_addr }} proto {{ item.proto }} dport {{ item.host_port }} DNAT to {{ item.guest_addr }}:{{ item.guest_port }};
    table filter chain FORWARD daddr {{ item.guest_addr }} proto {{ item.proto }} dport {{ item.guest_port }} ACCEPT;
{% endfor %}
}

domain (ip ip6) {
{% if extra_forwarding %}
   table filter chain FORWARD {
{% for item in extra_forwarding %}
       interface {{ item.interface }} outerface {{ item.outerface }} {% if item.daddr | default(False) %}daddr {{ item.daddr }}{% endif %} {% if item.saddr | default(False) %}saddr {{ item.saddr }}{% endif %} ACCEPT;
{% endfor %}
   }
{% endif %}

{% for item in networks %}
{% if item.mode | default("nat") == "nat" %}
    table nat chain POSTROUTING {
        saddr {{ item.ip4 }} daddr 224.0.0.0/24 RETURN;
        saddr {{ item.ip4 }} daddr 255.255.255.255/32 RETURN;
        saddr {{ item.ip4 }} daddr ! {{ item.ip4 }} proto (tcp udp) MASQUERADE to-ports 1025-65535 random;
        saddr {{ item.ip4 }} daddr ! {{ item.ip4 }} MASQUERADE;
    }
{% endif %}
    table filter chain FORWARD {
{% if item.mode | default("nat") == "nat" %}
        daddr {{ item.ip4 }} outerface {{ item.iface }} mod state state (RELATED ESTABLISHED) ACCEPT;
        saddr {{ item.ip4 }} interface {{ item.iface }} ACCEPT;
{% endif %}
{% if item.ip6 | default(False) %}
        saddr {{ item.ip6 }} interface {{ item.iface }} ACCEPT;
        daddr {{ item.ip6 }} outerface {{ item.iface }} ACCEPT;
{% endif %}
        interface {{ item.iface }} outerface {{ item.iface }} ACCEPT;
        outerface {{ item.iface }} REJECT reject-with icmp-port-unreachable;
        interface {{ item.iface }} REJECT reject-with icmp-port-unreachable;
    }
    table filter chain INPUT {
        interface {{ item.iface }} proto (tcp udp) dport (53 67) ACCEPT;
    }
{% endfor %}
}

domain eb table nat {
{% for container in containers %}
{% for network in container.networks %}
{% set netobj = (networks | selectattr('name', 'equalto', network.net) | list)[0] %}
    chain I-{{ network.host_ifname }}-mac {
        saddr {{ network.mac }} RETURN;
        DROP;
    }

    chain PREROUTING {
        interface {{ network.host_ifname }} @subchain "I-{{ network.host_ifname }}" {
            jump I-{{ network.host_ifname }}-mac;
            proto IPv4 {
                ip-source {{ network.ip4 }} ACCEPT;
                ip-source 0.0.0.0 ip-proto UDP ACCEPT;
            }
            proto IPv6 {
                {# FIXME: this doesnâ€™t allow or check neighbour discovery ... #}
                ip6-source {{ network.ip6 }} ACCEPT;
            }
            proto ARP {
                arp-mac-src {{ network.mac }} arp-ip-src {{ network.ip4 }} ACCEPT;
            }
            DROP;
        }
    }
{% endfor %}
{% endfor %}
}