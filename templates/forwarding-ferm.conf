{% macro solicit_mc(ip6, caller=None) %}
{{ "ff02::1:ff00:0/104" | ipsubnet() | ipaddr((ip6 | ipaddr('address') | ipaddr('int') | int).__and__(16777215) | string) -}}
{% endmacro %}
{% macro macsuffix(mac, caller=None) %}
{% set macparts = (mac | hwaddr).split(":") %}
{% set p1 = ["%02x" | format((macparts[0] | int(base=16)).__xor__(2)), macparts[1]] | join("") %}
{% set p2 = [macparts[2], "ff"] | join("") %}
{% set p3 = ["fe", macparts[3]] | join("") %}
{% set p4 = macparts[4:] | join("") %}
{{ ("::" + ([p1, p2, p3, p4] | join(":"))) | ipaddr() -}}
{% endmacro %}
{% macro ip6_ll(mac, caller=None) %}
{{ "fe80::/64" | ipsubnet() | ipaddr(macsuffix(mac) | ipaddr("int")) -}}
{% endmacro %}

{% for item in networks %}
@hook post "iptables -t mangle -I POSTROUTING -o {{ item.iface }} -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill";
{% endfor %}

domain (ip ip6) {
{% for item in nat_port_forwarding %}
    table nat chain PREROUTING daddr {{ item.host_addr }} proto {{ item.proto }} dport {{ item.host_port }} DNAT to {{ item.guest_addr }}:{{ item.guest_port }};
    table filter chain FORWARD daddr {{ item.guest_addr }} proto {{ item.proto }} dport {{ item.guest_port }} ACCEPT;
{% endfor %}
}

domain (ip ip6) {
{% if extra_forwarding %}
   table filter chain FORWARD {
{% for item in extra_forwarding %}
       interface {{ item.interface }} outerface {{ item.outerface }} {% if item.daddr | default(False) %}daddr {{ item.daddr }}{% endif %} {% if item.saddr | default(False) %}saddr {{ item.saddr }}{% endif %} ACCEPT;
{% endfor %}
   }
{% endif %}

{% for item in networks %}
{% set network_mode = item.mode | default("nat") %}
{% if network_mode == "nat" %}
    table nat chain POSTROUTING {
        saddr {{ item.ip4 }} daddr 224.0.0.0/24 RETURN;
        saddr {{ item.ip4 }} daddr 255.255.255.255/32 RETURN;
        saddr {{ item.ip4 }} daddr ! {{ item.ip4 }} proto (tcp udp) MASQUERADE to-ports 1025-65535 random;
        saddr {{ item.ip4 }} daddr ! {{ item.ip4 }} MASQUERADE;
    }
{% endif %}

    table filter chain FORWARD {
{% if network_mode != "isolated" %}
        daddr {{ item.ip4 }} outerface {{ item.iface }} mod state state (RELATED ESTABLISHED) ACCEPT;
        saddr {{ item.ip4 }} interface {{ item.iface }} ACCEPT;
{% endif %}
{% if network_mode != "isolated" %}
{% if item.ip6 | default(False) %}
        saddr {{ item.ip6 }} interface {{ item.iface }} ACCEPT;
        daddr {{ item.ip6 }} outerface {{ item.iface }} ACCEPT;
{% endif %}
{% endif %}
        interface {{ item.iface }} outerface {{ item.iface }} ACCEPT;
        outerface {{ item.iface }} REJECT reject-with icmp-port-unreachable;
        interface {{ item.iface }} REJECT reject-with icmp-port-unreachable;
    }

    table filter chain INPUT {
        interface {{ item.iface }} proto (tcp udp) dport (53 67) ACCEPT;
    }
{% endfor %}
}

domain eb table nat {
{% for container in containers + vms %}
# container {{ container.name }}
{% for network in container.networks %}
## network interface to {{ network.net }} of {{ container.name }}; hostif={{ network.host_ifname }}, guestif={{ network.guest_ifname | default('') }}
{% set netobj = (networks | selectattr('name', 'equalto', network.net) | list)[0] %}
{% if netobj.strict | default(True) %}
    chain I-{{ network.host_ifname }}-mac {
        saddr {{ network.mac }} RETURN;
        DROP;
    }

    chain PREROUTING {
        interface {{ network.host_ifname }} @subchain "I-{{ network.host_ifname }}" {
            jump I-{{ network.host_ifname }}-mac;
{% if network.ip4 | default(False) %}
            proto IPv4 ip-source 0.0.0.0 ip-proto UDP ACCEPT;
{% set ip4addrs = [network.ip4] if network.ip4 is string else network.ip4 %}
{% if network.isolated | default(False) %}
            # isolated
            proto IPv4 ip-source ({{ ip4addrs | ipaddr('address') | join(" ") }}) @subchain {
                # can talk to self
                ip-destination ({{ ip4addrs | ipaddr('address') | join(" ") }}) ACCEPT;
                # can talk to gateway
                ip-destination {{ netobj.ip4 | ipaddr('address') }} ACCEPT;
                # drop everything to subnet otherwise
                ip-destination {{ netobj.ip4 | ipaddr('network/prefix') }} DROP;
                # and accept what goes beyond
                ACCEPT;
            }
{% else %}
            proto IPv4 ip-source ({{ ip4addrs | ipaddr('address') | join(" " ) }}) ACCEPT;
{% endif %}
            proto ARP arp-mac-src {{ network.mac }} arp-ip-src ({{ ip4addrs | ipaddr('address') | join(" ") }}) ACCEPT;
{% endif %}
{% if network.ip6 | default(False) %}
            proto IPv6 {
                ip6-source {{ network.ip6 | ipaddr('address') }} ACCEPT;
                ip6-source {{ ip6_ll(network.mac) | ipaddr('address') }} ACCEPT;
                # may multicast from broadcast address
                # for IPv6-ll EUI-64 address {{ ip6_ll(network.mac) }}
                ip6-source ::/128 ip6-destination {{ solicit_mc(ip6_ll(network.mac)) }} ACCEPT;
                # for statically assigned address {{ network.ip6 }}
                ip6-source ::/128 ip6-destination {{ solicit_mc(network.ip6) }} ACCEPT;
                # general multicast destinations
                ip6-source ::/128 ip6-destination (ff02::1/128 ff02::2/128) ACCEPT;
            }
{% endif %}
            DROP;
        }
    }

{% endif %}
{% endfor %}
{% endfor %}
}
