---
- name: install libvirt and tools
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
  - ebtables
  - dnsmasq-base
  - dns-root-data
  - debootstrap
  - rsync
  - lxc
  - python-libvirt
  - python3
  - curl
  - bridge-utils
  tags:
  - container-host

- name: install debian 8 specific packages
  apt:
    name: "{{ item }}"
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_release == "jessie"
  with_items:
  - libvirt-bin
  - libvirt0
  tags:
  - container-host

- name: install debian 9 specific packages
  apt:
    name: "{{ item }}"
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_release == "stretch"
  with_items:
  - libvirt-daemon-system
  - libvirt-clients
  tags:
  - container-host

- name: install debian 10 specific packages
  apt:
    name:
    - libvirt-daemon-system
    - libvirt-clients
    - lxc-templates
    - systemd-container
    state: latest
  when: ansible_distribution == "Debian" and ansible_distribution_release == "buster"
  tags:
  - container-host

- name: update grub config to generate cgroup_enable=memory
  lineinfile:
    dest: /etc/default/grub
    backrefs: yes
    regexp: '^GRUB_CMDLINE_LINUX="(cgroup_enable=memory swapaccount )?\s?([^"]*)"'
    line: 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount \2"'
  register: grub_update
  when: ansible_distribution == "Debian" and ansible_distribution_release == "jessie"
  tags:
  - container-host

- name: re-generate grub config
  command: update-grub
  when: grub_update is changed
  tags:
  - container-host

- name: disable and stop dnsmasq
  service:
    name: dnsmasq
    state: stopped
    enabled: no
  when: ansible_distribution == "Debian"
  failed_when: "False"
  tags:
  - container-host

- name: ensure libvirt is running
  service:
    name: libvirtd
    state: started
  tags:
  - container-host

- name: ensure ansible working directory is present
  file:
    path: "{{ persistent_ansible_directory }}/container-host/"
    mode: u=rwx,go-rwx
    state: directory
  tags:
  - container-host

- name: create host network configurations
  template:
    src: bridge
    dest: "/etc/network/interfaces.d/{{ item.iface}}"
    mode: u=r,go-rwx
    owner: root
    group: root
  register: host_network_changed
  with_items: "{{ networks }}"
  when: "item.mode | default('nat') != 'bridge'"
  tags:
  - container-host

- name: start host network
  command:
  args:
    argv:
    - ifup
    - "{{ item.item.iface }}"
  when: item is changed
  with_items: "{{ host_network_changed.results }}"
  tags:
  - container-host

- name: deploy sysctl static settings
  copy:
    src: "{{ item }}.sysctl"
    dest: "/etc/sysctl.d/{{ item }}.conf"
    mode: u=r,go-rwx
    owner: root
    group: root
  with_items:
  - forwarding
  notify:
  - reapply sysctl
  tags:
  - container-host

- name: create containers
  command:
  args:
    argv:
    - lxc-create
    - "-t"
    - '{{ item.template | default("debian") }}'
    - "-n"
    - "{{ item.rootfs_name }}"
    - "--"
    - "--release"
    - '{{ item.template_release | default("jessie") }}'
    creates: /var/lib/lxc/{{ item.rootfs_name }}
  with_items: "{{ containers }}"
  register: container_created
  tags:
  - container-host
  - guest-setup

- name: rebase ids
  script: rebase-ids.py "/var/lib/lxc/{{ item.item.rootfs_name }}" "{{ item.item.idmap.base }}"
  when: (item is changed) and (item.item.idmap | default(False))
  with_items: "{{ container_created.results | default([]) }}"
  tags:
  - container-host
  - guest-setup

- name: ensure that lxc does not think these are meant for it
  file:
    state: absent
    path: "/var/lib/lxc/{{ item.rootfs_name }}/config"
  with_items: "{{ containers }}"
  tags:
  - guest-setup
  - container-host

- name: create source directories for fs mounts if they do not exist
  file:
    path: "{{ item.1.host }}"
    state: directory
  with_subelements:
  - "{{ containers }}"
  - mounts
  register: mount_sources
  tags:
  - container-host
  - guest-setup

- name: manage ownership of source directories for fs mounts if desired or newly created
  file:
    path: "{{ item.item.1.host }}"
    state: directory
    owner: "{{ item.item.1.owner }}"
    group: "{{ item.item.1.group }}"
  loop: "{{ mount_sources.results }}"
  when: "item.item.1.set_uid | default(False) or item is changed"
  tags:
  - container-host
  - guest-setup

- name: check if destination directories for fs mounts exist
  command:
  args:
    argv:
    - "test"
    - "-d"
    - '/var/lib/lxc/{{ item.0.rootfs_name }}{{ item.1.guest }}'
  register: mount_dirs
  changed_when: "mount_dirs.rc == 1"
  failed_when: "False"
  with_subelements:
  - "{{ containers }}"
  - mounts
  tags:
  - container-host
  - guest-setup

- name: create destination directories for fs mounts if they do not exist
  file:
    path: "/var/lib/lxc/{{ item.item.0.rootfs_name }}{{ item.item.1.guest }}"
    state: directory
  when: "item is changed"
  with_items: "{{ mount_dirs.results }}"
  tags:
  - container-host
  - guest-setup

- name: define container
  virt:
    command: define
    xml: '{{ lookup("template", "../templates/libvirt/container.xml") }}'
    uri: lxc:///
    name: '{{ item.name }}'
  with_items: "{{ containers }}"
  tags:
  - container-host
  - guest-setup

- name: start container
  virt:
    state: running
    name: "{{ item.name }}"
    uri: lxc:///
  with_items: "{{ containers }}"
  notify: run ferm
  tags:
    - container-host
    - guest-setup

- name: shellscript to connect to sshd
  template:
    src: sshd-script
    dest: "/usr/local/bin/virt-{{ item.name }}-sshd"
    mode: ugo=rx
  with_items: "{{ containers }}"
  tags:
  - container-host
  - guest-setup

- name: admin group for container
  group:
    state: present
    name: "{{ item.name }}-admin"
  with_items: "{{ containers }}"
  when: "item.admin_group | default(True)"
  tags:
  - container-host
  - guest-setup

- name: "root keys for container: .ssh"
  file:
    owner: "{{ (item.idmap | default({})).base | default(0) }}"
    group: "{{ (item.idmap | default({})).base | default(0) }}"
    state: directory
    path: "/var/lib/lxc/{{ item.rootfs_name }}/rootfs/root/.ssh/"
    mode: u=rwx,go-rwx
  with_items: "{{ containers }}"
  when: item.manage_keys | default(True)
  tags:
  - guest-setup
  - guest-setup-admin-accounts
  - admin-accounts
  - container-host

- name: "root keys for container: authorized_keys"
  copy:
    dest: "/var/lib/lxc/{{ item.rootfs_name }}/rootfs/root/.ssh/authorized_keys"
    content: "{% for admin in admins if ('_' + item.name + '.' + admin_setup.name) in (admin.targets | default([])) -%}{{ admin['keys'] | join('\n') }}{{ '\n' }}{%- endfor %}"
    owner: "{{ (item.idmap | default({})).base | default(0) }}"
    group: "{{ (item.idmap | default({})).base | default(0) }}"
    mode: u=rw,go-rwx
  with_items: "{{ containers }}"
  when: item.manage_keys | default(True)
  tags:
  - container-host
  - guest-setup
  - guest-setup-admin-accounts
  - admin-accounts

- include: vms.yml
  tags:
  - container-host
  - container-host-vms

- name: setup firewall for nat port forwarding
  template:
    src: forwarding-ferm.conf
    dest: /etc/ferm/ferm.d/05-container-forwarding.conf
    owner: root
    group: root
    mode: u=rw,go-rwx
  tags:
  - container-host
  - nat-forwarding
  - ferm
  notify:
  - run ferm
  when: ferm

- name: setup nft rules
  template:
    src: "{{ item }}-nft.conf"
    dest: "/etc/nft.d/05-container-{{ item }}.conf"
    owner: root
    group: root
    mode: u=rw,go-rwx
  tags:
  - container-host
  - nat-forwarding
  - nft
  with_items:
  - forwarding
  - spoofing-filter
  notify:
  - reload nft
  when: nft

- name: write topology metrics
  template:
    src: "topology.prom"
    dest: /var/lib/prometheus/node-exporter/container-topology.prom
    owner: root
    group: root
    mode: u=rw,go=r
  tags:
  - container-host
  - static-metrics
